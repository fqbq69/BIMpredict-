import pandas as pd

### ===============================================
### Define essential columns for each DataFrame
### ===============================================
ESSENTIAL_COLUMNS = {
    "Murs": [
        "Id", "011EC_Lot", "012EC_Ouvrage", "013EC_Localisation", "014EC_Mode Constructif", "Hauteur", "Epaisseur", "AI", "AS", "Sols en intersection", "Sols coup√©s (u)", "Sols coup√©s (Ids)",
        "Sols coupants (u)", "Sols coupants (Ids)", "Sol au-dessus", "Sol en-dessous", "Fen√™tres", "Portes", "Ouvertures", "Murs imbriqu√©s",
        "Mur multicouche", "Profil modifi√©", "Extension inf√©rieure", "Extension sup√©rieure", "Volume", "Surface", "Partie inf√©rieure attach√©e", "Partie sup√©rieure attach√©e",
        "D√©calage sup√©rieur", "D√©calage inf√©rieur", "Mat√©riau structurel",
    ],
    "Sols": [
        "Id", "011EC_Lot", "012EC_Ouvrage", "013EC_Localisation", "014EC_Mode Constructif", "Murs en intersection",
        "Murs coup√©s (u)", "Murs coup√©s (Ids)", "Murs coupants (u)", "Murs coupants (Ids)", "Poutres en intersection", "Poutres coup√©s (u)",
        "Poutres coup√©s (Ids)", "Poutres coupants (u)", "Poutres coupants (Ids)", "Poteaux en intersection",
        "Poteaux coup√©s (u)", "Poteaux coup√©s (Ids)", "Poteaux coupants (u)", "Poteaux coupants (Ids)", "Volume", "Surface", "Mat√©riau structurel",
    ],
    "Poutres": [
        "Id", "011EC_Lot", "012EC_Ouvrage", "013EC_Localisation", "014EC_Mode Constructif", "AI", "AS", "Hauteur totale", "Hauteur", "Sols en intersection", "Sols coup√©s (u)",
        "Sols coup√©s (Ids)", "Sols coupants (u)", "Sols coupants (Ids)", "Sol au-dessus", "Sol en-dessous", "Poteaux en intersection",
        "Poteaux coup√©s (u)", "Poteaux coup√©s (Ids)", "Poteaux coupants (u)", "Mat√©riau structurel", "El√©vation √† la base", "Longueur de coupe",
    ],
    "Poteaux": [
        "Id", "011EC_Lot", "012EC_Ouvrage", "013EC_Localisation", "014EC_Mode Constructif", "Nom", "AI", "AS", "Hauteur", "Longueur",
        "Partie inf√©rieure attach√©e", "Partie sup√©rieure attach√©e", "Sols en intersection", "Sols coup√©s (u)", "Sols coup√©s (Ids)",
        "Sols coupants (u)", "Sols coupants (Ids)", "Poutres en intersection", "Poutres coup√©s (u)", "Poutres coup√©s (Ids)", "Poutres coupants (u)",
        "Poutres coupants (Ids)", "Mat√©riau structurel", "Marque d'emplacement du poteau", "D√©calage sup√©rieur", "D√©calage inf√©rieur",
    ]
}
### ========================================
### Prefix mapping for different DataFrames
### ========================================
PREFIXES = {
    "Murs": "Mur_",
    "Sols": "Sol_",
    "Poutres": "Poutre_",
    "Poteaux": "Poteau_",
}

### ============================================================================
### Function to sanitize column names by removing spaces and special characters
### ============================================================================
def sanitize_column_name(col_name):
    """Remove spaces and special characters from column names."""
    return col_name.strip().replace(" ", "_").replace("(", "").replace(")", "")


### ============================================================================
### Function to load and choose essential columns from columns in Excel sheets
### ============================================================================
def load_and_sanitize_data(filepath):
    """
    Load, clean, and sanitize all DataFrames from Excel file.
    Returns dictionary of fully sanitized DataFrames.
    """
    dfs = {}

    try:
        print("üìÇ Loading and sanitizing Excel file...")
        xls = pd.ExcelFile(filepath)

        for sheet, keep_cols in ESSENTIAL_COLUMNS.items():
            if sheet in xls.sheet_names:
                # Load original data
                df = pd.read_excel(filepath, sheet_name=sheet)

                # Clean and sanitize column names
                sanitized_cols = {col: sanitize_column_name(col) for col in df.columns if col in keep_cols}
                prefix = PREFIXES.get(sheet, "")
                renamed_cols = {col: prefix + sanitized_cols[col] for col in sanitized_cols}

                # Create sanitized DataFrame
                dfs[sheet] = df[list(sanitized_cols.keys())].rename(columns=renamed_cols)

                # Also sanitize the data values in ID columns
                for col in dfs[sheet].columns:
                    if col.endswith('_Id') or col.endswith('_Ids'):
                        dfs[sheet][col] = dfs[sheet][col].astype(str).str.strip()

                print(f"‚úÖ {sheet}: Sanitized {len(renamed_cols)} columns")

    except Exception as e:
        print(f"üö® Error: {str(e)}")
        return {sheet: pd.DataFrame() for sheet in ESSENTIAL_COLUMNS.keys()}

    return dfs
