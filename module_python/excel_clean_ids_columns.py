import pandas as pd
import numpy as np

def clean_ids_columns(df_dict):
    """
    Cleans ID columns across all DataFrames by filling NaN/empty values with "0"
    if the corresponding (U) column equals 0.

    Args:
        df_dict: Dictionary of DataFrames {sheet_name: df}

    Returns:
        Updated DataFrames with cleaned ID columns.
    """
    COLUMN_PAIRS = [
        ('Sols coup√©s (u)', 'Sols coup√©s (Ids)'),
        ('Sols coupants (u)', 'Sols coupants (Ids)'),
        ('Murs coup√©s (u)', 'Murs coup√©s (Ids)'),
        ('Murs coupants (u)', 'Murs coupants (Ids)'),
        ('Poutres coup√©s (u)', 'Poutres coup√©s (Ids)'),
        ('Poutres coupants (u)', 'Poutres coupants (Ids)'),
        ('Poteaux coup√©s (u)', 'Poteaux coup√©s (Ids)'),
        ('Poteaux coupants (u)', 'Poteaux coupants (Ids)')
    ]

    for sheet_name, df in df_dict.items():
        if not isinstance(df, pd.DataFrame) or df.empty:
            print(f"‚ö†Ô∏è Skipping {sheet_name}: Empty or invalid DataFrame")
            continue

        print(f"\nüîç Processing {sheet_name}...")

        for u_col, ids_col in COLUMN_PAIRS:
            if u_col not in df.columns or ids_col not in df.columns:
                print(f"üö® Skipping: {u_col} or {ids_col} not found in {sheet_name}")
                continue  # Skip missing columns

            print(f"‚úÖ Processing Column Pair: {u_col} ‚Üí {ids_col}")

            # Convert U column to numeric
            df[u_col] = pd.to_numeric(df[u_col], errors='coerce').fillna(0).astype(int)

            # Convert ID column to **consistent string type**
            df[ids_col] = df[ids_col].astype(str)

            # Explicitly replace known NaN representations with np.nan
            df[ids_col] = df[ids_col].replace(['nan', 'na', 'none', '', ' '], np.nan)

            # Ensure IDs are properly formatted when U = 0
            condition = (df[u_col] == 0) & (df[ids_col].isna())

            df.loc[condition, ids_col] = "0"  # Assigning "0" as string

            cleaned_count = condition.sum()
            print(f"‚úÖ Cleaned {cleaned_count} rows in {ids_col}")

    return df_dict
